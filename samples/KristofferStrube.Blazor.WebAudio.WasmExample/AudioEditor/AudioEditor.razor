@using KristofferStrube.Blazor.SVGEditor
@using KristofferStrube.Blazor.SVGEditor.MenuItems.Action;
@using KristofferStrube.Blazor.WebAudio.WasmExample.AudioEditor.MenuItems;
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<CascadingValue Value="AudioContext">
    <SVGEditor @ref=SVGEditor
               SnapToInteger=true
               Input=@Input
               InputUpdated="async (string s) => { Input = s; await InputChanged.InvokeAsync(s); StateHasChanged(); }"
               SupportedElements=SupportedElements
               AddNewSVGElementMenuItems=AddNewMenuItems
               ActionMenuItems=ActionMenuItems/>
</CascadingValue>

@code {
    protected bool running = true;
    protected SVGEditor SVGEditor { get; set; } = default!;
    protected AudioContext AudioContext { get; set; } = default!;

    [Parameter]
    public string Input { get; set; } = "";

    [Parameter]
    public EventCallback<string> InputChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AudioContext = await AudioContext.CreateAsync(JSRuntime);

        await ProcessQueue();
        StateHasChanged();

        while (running)
        {
            await Task.Delay(50);
            await ProcessQueue();
        }
    }

    private async Task ProcessQueue()
    {
        foreach (ITaskQueueable taskQueueable in SVGEditor.Elements.Where(e => e is ITaskQueueable))
        {
            while (taskQueueable.QueuedTasks.TryDequeue(out var task))
            {
                await task(AudioContext);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected List<SupportedElement> SupportedElements { get; set; } = new()
    {
        new(typeof(G), element => element.TagName == "g"),
        new(typeof(Oscillator), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "oscillator"),
        new(typeof(AudioDestination), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "audio-destination"),
        new(typeof(Gain), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "gain"),
        new(typeof(Analyser), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "analyser"),
        new(typeof(BiquadFilter), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "biquad-filter"),
        new(typeof(MediaStreamAudioSource), element => element.TagName is "rect" && element.GetAttribute("data-elementtype") == "media-stream-audio-source"),
        new(typeof(Connector), element => element.TagName is "line" && element.GetAttribute("data-elementtype") == "connector"),
    };

    protected List<SupportedAddNewSVGElementMenuItem> AddNewMenuItems { get; set; } = new()
    {
        new(typeof(AddNewConnectorMenuItem), (_,data) => data is Port { Ingoing: false }),
        new(typeof(AddNewAudioDestinationMenuItem), (_,_) => true),
        new(typeof(AddNewOscillatorMenuItem), (_,_) => true),
        new(typeof(AddNewMediaStreamAudioSourceMenuItem), (_,_) => true),
        new(typeof(AddNewGainMenuItem), (_,_) => true),
        new(typeof(AddNewAnalyserMenuItem), (_,_) => true),
        new(typeof(AddNewBiquadFilterMenuItem), (_,_) => true),
    };

    [Parameter]
    public List<ActionMenuItem> ActionMenuItems { get; set; } = new() {
        new(typeof(MoveMenuItem), (_, data) => data is Shape shape && !shape.IsChildElement),
        new(typeof(GroupMenuItem), (_, data) => data is Shape shape && !shape.IsChildElement),
        new(typeof(UngroupMenuItem), (_, data) => data is G g && !g.IsChildElement),
        new(typeof(RemoveMenuItem), (svgEditor, data) => data is Shape && !svgEditor.DisableRemoveElement),
        new(typeof(CopyMenuItem), (svgEditor, data) => data is Shape && !svgEditor.DisableCopyElement),
        new(typeof(PasteMenuItem), (svgEditor, _) => !svgEditor.DisablePasteElement)
    };

    public async Task StopAsync()
    {
        @foreach (Node node in SVGEditor.Elements.Where(e => e is Node))
        {
            if (await node.AudioNode(AudioContext) is AudioScheduledSourceNode audioSource)
            {
                await audioSource.StopAsync();
            }
            else if (node is MediaStreamAudioSource mediaStreamAudioSourceNode)
            {
                await mediaStreamAudioSourceNode.StopAsync(await mediaStreamAudioSourceNode.AudioNode(AudioContext));
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopAsync();
        running = false;
    }
}