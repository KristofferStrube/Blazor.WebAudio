@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.Extensions
@inherits NodeEditor<Oscillator>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <rect @ref=ElementReference
        @onfocusin="FocusElement"
        @onfocusout="UnfocusElement"
        @onpointerdown="SelectAsync"
        @onkeyup="KeyUp"
              tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
              x=@SVGElement.X.AsString()
              y=@SVGElement.Y.AsString()
              width=@SVGElement.Width.AsString()
              height=@SVGElement.Height.AsString()
              stroke="@SVGElement.Stroke"
              stroke-width="@SVGElement.StrokeWidth"
              stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
              stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
              stroke-dasharray="@SVGElement.StrokeDasharray"
              stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
              fill="@SVGElement.Fill"
              style="filter:brightness(@(SVGElement.Selected ? "0.9" : "1"))">
        </rect>
        <foreignObject @onpointermove:stopPropagation=!ChildContentIsNoninteractive x="@((SVGElement.X+10).AsString())" y="@((SVGElement.Y+10).AsString())" height="110" width="200" style="border:solid @(SVGElement.StrokeWidth)px @(SVGElement.Stroke);padding:2;pointer-events:@(ChildContentIsNoninteractive ? "none" : "inherit");touch-action:@(ChildContentIsNoninteractive ? "none" : "inherit");">
            Oscillator
            <br />
            <select @bind=SVGElement.Type @bind:after="SetType">
                <option value="@OscillatorType.Sine" title="A sine wave.">Sine</option>
                <option value="@OscillatorType.Square" title="A square wave of duty period 0.5.">Square</option>
                <option value="@OscillatorType.Sawtooth" title="A sawtooth wave.">Sawtooth</option>
                <option value="@OscillatorType.Triangle" title="A triangle wave.">Triangle</option>
            </select>
            <br />
            @if (FrequencyAudioParam is not null)
            {
                <AudioParamSlider AudioParam="FrequencyAudioParam" Label="Frequency" Min="1" Max="2000" StepSize="1" UpdateCallback="f => SVGElement.Frequency = f" />
            }
        </foreignObject>

        @if (FrequencyAudioParam is not null)
        {
            <ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@(new Port(SVGElement, true)) MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
                <circle @onpointerdown=@(() => SelectAudioParam("frequency")) cx=@((SVGElement.X).AsString()) cy="@((SVGElement.Y+SVGElement.AudioParamPositions["frequency"]).AsString())" r="10" fill="#1976D3">

                </circle>
            </ContextMenuTrigger>
        }

        <ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@(new Port(SVGElement, false)) MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
            <circle cx=@((SVGElement.X+SVGElement.Width).AsString()) cy="@((SVGElement.Y + 20).AsString())" r="10" fill="grey">

            </circle>
        </ContextMenuTrigger>
    </g>
</ContextMenuTrigger>

@code {
    private AudioParam? FrequencyAudioParam;

    [CascadingParameter]
    public required AudioContext AudioContext { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (FrequencyAudioParam is null && AudioContext is not null)
        {
            FrequencyAudioParam = await SVGElement.AudioParams["frequency"](AudioContext);
            StateHasChanged();
        }
    }

    private async Task SetType()
    {
        if (SVGElement.Type is {} type)
        {
            await ((OscillatorNode)await SVGElement.AudioNode(AudioContext)).SetTypeAsync(type);
        }
    }
}