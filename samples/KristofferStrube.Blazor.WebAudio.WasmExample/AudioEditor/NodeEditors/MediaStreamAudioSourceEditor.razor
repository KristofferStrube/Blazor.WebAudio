@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.Extensions
@inherits NodeEditor<MediaStreamAudioSource>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <rect @ref=ElementReference
        @onfocusin="FocusElement"
        @onfocusout="UnfocusElement"
        @onpointerdown="SelectAsync"
        @onkeyup="KeyUp"
              tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
              x=@SVGElement.X.AsString()
              y=@SVGElement.Y.AsString()
              width=@SVGElement.Width.AsString()
              height=@SVGElement.Height.AsString()
              stroke="@SVGElement.Stroke"
              stroke-width="@SVGElement.StrokeWidth"
              stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
              stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
              stroke-dasharray="@SVGElement.StrokeDasharray"
              stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
              fill="@SVGElement.Fill"
              style="filter:brightness(@(SVGElement.Selected ? "0.9" : "1"))">
        </rect>
        <foreignObject @onpointermove:stopPropagation=!ChildContentIsNoninteractive x="@((SVGElement.X+10).AsString())" y="@((SVGElement.Y+10).AsString())" height="@((SVGElement.Height-20).AsString())" width="200" style="border:solid @(SVGElement.StrokeWidth)px @(SVGElement.Stroke);padding:2;pointer-events:@(ChildContentIsNoninteractive ? "none" : "inherit");touch-action:@(ChildContentIsNoninteractive ? "none" : "inherit");">
            <label for="audioSource">MediaStream Source</label>
            @if (SVGElement.AudioOptions.Count > 0)
            {
                <select id="audioSource" @bind=SVGElement.SelectedAudioSource @bind:after="SetMediaStreamAudioSourceNode">
                    @foreach (var option in SVGElement.AudioOptions)
                    {
                        <option value="@option.id" selected="@(option.id == SVGElement.SelectedAudioSource)">@option.label</option>
                    }
                </select>
            }
            <br />
            <label for="noise-suppression">Noise Suppression</label>
            <input type="checkbox" id="noise-suppression" @bind=SVGElement.NoiseSuppresion @bind:after="SetMediaStreamAudioSourceNode" />
            <br />
            <label for="echo-cancellation">Echo Cancellation</label>
            <input type="checkbox" id="echo-cancellation" @bind=SVGElement.EchoCancellation @bind:after="SetMediaStreamAudioSourceNode" />
        </foreignObject>
        <ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@(new Port(SVGElement, false)) MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
            <circle cx=@((SVGElement.X+SVGElement.Width).AsString()) cy="@((SVGElement.Y+20).AsString())" r="10" fill="grey">

            </circle>
        </ContextMenuTrigger>
    </g>
</ContextMenuTrigger>

@code {
    private MediaStreamAudioSourceNode? mediaStreamAudioSourceNode;

    [CascadingParameter]
    public required AudioContext AudioContext { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (mediaStreamAudioSourceNode is null && AudioContext is not null)
        {
            mediaStreamAudioSourceNode = (MediaStreamAudioSourceNode)await SVGElement.AudioNode(AudioContext);
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async Task SetMediaStreamAudioSourceNode()
    {
        await SVGElement.SetMediaStreamAudioSourceNode(AudioContext);
        StateHasChanged();
    }
}