@using BlazorContextMenu
@using KristofferStrube.Blazor.SVGEditor.Extensions
@using KristofferStrube.Blazor.WebIDL;
@inherits NodeEditor<Analyser>

<ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@SVGElement MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
    <g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">
        <rect @ref=ElementReference
              @onfocusin="FocusElement"
              @onfocusout="UnfocusElement"
              @onpointerdown="SelectAsync"
              @onkeyup="KeyUp"
              tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
              x=@SVGElement.X.AsString()
              y=@SVGElement.Y.AsString()
              width=@SVGElement.Width.AsString()
              height=@SVGElement.Height.AsString()
              stroke="@SVGElement.Stroke"
              stroke-width="@SVGElement.StrokeWidth"
              stroke-linecap="@SVGElement.StrokeLinecap.AsString()"
              stroke-linejoin="@SVGElement.StrokeLinejoin.AsString()"
              stroke-dasharray="@SVGElement.StrokeDasharray"
              stroke-dashoffset="@SVGElement.StrokeDashoffset.AsString()"
              fill="@SVGElement.Fill"
              style="filter:brightness(@(SVGElement.Selected ? "0.9" : "1"))">
        </rect>
        <foreignObject @onpointerdown:stopPropagation=!SVGElement.Selected x="@((SVGElement.X+10).AsString())" y="@((SVGElement.Y+10).AsString())" height="110" width="200" style="border:solid @(SVGElement.StrokeWidth)px @(SVGElement.Stroke);padding:2;pointer-events:@(SVGElement.Selected ? "none" : "inherit");touch-action:@(SVGElement.Selected ? "none" : "inherit")">
            Analyser
            <br />
            <select @bind=SVGElement.Type>
                <option value="TimeDomain" title="Time Domain Data.">Time Domain</option>
                <option value="Frequency" title="Frequency Data.">Frequency</option>
            </select>
            <br />
            <Plot Data="measurements" Height="50" />
        </foreignObject>
        <ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@(new Port(SVGElement, true)) MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
            <circle @onpointerdown="() => SelectPort()" cx=@((SVGElement.X).AsString()) cy="@((SVGElement.Y+20).AsString())" r="10" fill="grey">

            </circle>
        </ContextMenuTrigger>
        <ContextMenuTrigger MenuId="SVGMenu" WrapperTag="g" Data=@(new Port(SVGElement, false)) MouseButtonTrigger="SVGElement.ShouldTriggerContextMenu ? MouseButtonTrigger.Right : (MouseButtonTrigger)4">
            <circle cx=@((SVGElement.X+SVGElement.Width).AsString()) cy="@((SVGElement.Y+20).AsString())" r="10" fill="grey">

            </circle>
        </ContextMenuTrigger>
    </g>
</ContextMenuTrigger>

@code {
    private AnalyserNode? analyser;

    private byte[] measurements = Array.Empty<byte>();

    [CascadingParameter]
    public required AudioContext AudioContext { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (analyser is null && AudioContext is not null)
        {
            analyser = (AnalyserNode)await SVGElement.AudioNode(AudioContext);

            int bufferLength = (int)await analyser.GetFrequencyBinCountAsync();
            await using Uint8Array dataArray = await Uint8Array.CreateAsync(AudioContext.JSRuntime, bufferLength);

            SVGElement.Running = true;

            while (SVGElement.Running)
            {
                try
                {
                    SVGElement.QueuedTasks.Enqueue(async _ =>
                    {
                        if (SVGElement.Type is "TimeDomain")
                        {
                            await analyser.GetByteTimeDomainDataAsync(dataArray);
                            measurements = await dataArray.GetAsArrayAsync();
                        }
                        else
                        {
                            await analyser.GetByteFrequencyDataAsync(dataArray);

                            var data = (await dataArray.GetAsArrayAsync());
                            int endOfPlateau = 1;
                            for (int i = data.Length - 1; i >= 0; i--)
                            {
                                if (data[i] != 0)
                                {
                                    endOfPlateau = i;
                                    break;
                                }
                            }
                            measurements = data[..endOfPlateau];
                        }
                        SVGElement._stateRepresentation = "";

                        await InvokeAsync(StateHasChanged);
                    });
                    await Task.Delay(50);
                }
                catch (Exception)
                {

                }
            }
        }
    }
}