@using KristofferStrube.Blazor.SVGEditor
@using KristofferStrube.Blazor.SVGEditor.ShapeEditors
@using KristofferStrube.Blazor.SVGEditor.Extensions
@inherits ShapeEditor<PannerNodeShape>

<g transform="translate(@SVGElement.SVG.Translate.x.AsString() @SVGElement.SVG.Translate.y.AsString()) scale(@SVGElement.SVG.Scale.AsString())">

    <rect @ref=ElementReference
          @onfocusin="FocusElement"
          @onfocusout="UnfocusElement"
          @onpointerdown="SelectAsync"
          @onkeyup="KeyUp"
          tabindex="@(SVGElement.IsChildElement ? -1 : 0)"
          x=@SVGElement.X.AsString()
          y=@SVGElement.Y.AsString()
          width=@SVGElement.Width.AsString()
          height=@SVGElement.Height.AsString()
          fill="@SVGElement.Fill"
          transform="rotate(@(SVGElement.Rotation.AsString()) @((SVGElement.X + SVGElement.Width / 2).AsString()) @((SVGElement.Y + SVGElement.Height / 2).AsString()))">
    </rect>
    <polygon points=@Cone(20)
             fill="@SVGElement.Fill"
             opacity="0.1"
             style="pointer-events:none;"
             transform="rotate(@(SVGElement.Rotation.AsString()) @((SVGElement.X + SVGElement.Width / 2).AsString()) @((SVGElement.Y + SVGElement.Height / 2).AsString()))">
    </polygon>
    <polygon points=@Cone(10)
             fill="@SVGElement.Fill"
             opacity="0.1"
             style="pointer-events:none;"
             transform="rotate(@(SVGElement.Rotation.AsString()) @((SVGElement.X + SVGElement.Width / 2).AsString()) @((SVGElement.Y + SVGElement.Height / 2).AsString()))">
    </polygon>
</g>
<Anchor OnPointerDown="() => AnchorSelect(4)" Position="anchorPosition" />

@code {
    private (double x, double y) anchorPosition =>
        (
            x: SVGElement.X + SVGElement.Width / 2 + Math.Sin(-SVGElement.Rotation / 180 * Math.PI) * 10,
            y: SVGElement.Y + SVGElement.Height / 2 + Math.Cos(-SVGElement.Rotation / 180 * Math.PI) * 10
        );

    public string Cone(double angle)
    {
        List<(double x, double y)> points =
        [
            (SVGElement.X + SVGElement.Width / 2, SVGElement.Y + SVGElement.Height),
    (SVGElement.X + SVGElement.Width / 2 + 10 * Math.Sin(angle / 180 * Math.PI), SVGElement.Y + SVGElement.Height + 10 * Math.Cos(angle / 180 * Math.PI)),
    (SVGElement.X + SVGElement.Width / 2 + 10 * Math.Sin(-angle / 180 * Math.PI), SVGElement.Y + SVGElement.Height + 10 * Math.Cos(-angle / 180 * Math.PI)),
    ];

        return string.Join(" ", points.Select(point => $"{point.x.AsString()},{point.y.AsString()}"));
    }
}