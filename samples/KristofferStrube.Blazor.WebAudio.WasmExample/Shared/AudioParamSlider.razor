@using System.Globalization;

<label for=@inputId><small>@Label:</small></label>
<nobr>
    <input @bind-value=value
           @bind-value:event="oninput"
           @bind-value:after=AudioParamUpdatedAsync
           id=@inputId
           type="range"
           min="@Min"
           max="@Max"
           step="@(StepSize.ToString(CultureInfo.InvariantCulture))"
           style="width:min(200px, calc(100%-40px));" />
    <span style="width:40px;padding-left:4px;padding-right:4px;" class="badge bg-primary">
        <input @bind-value=value
               @bind-value:after=AudioParamUpdatedAsync
               style="border: none; outline: none; background: none;max-width:100%;" />
    </span>
</nobr>

@code {
    private string inputId = $"audioParam_{Guid.NewGuid()}"[..9];
    private float value = 0;

    [Parameter, EditorRequired]
    public required AudioParam AudioParam { get; set; }

    [Parameter, EditorRequired]
    public required string Label { get; set; }

    [Parameter,]
    public float Min { get; set; } = 0;

    [Parameter]
    public float Max { get; set; } = 100;

    [Parameter]
    public float StepSize { get; set; } = 0.01f;

    [Parameter]
    public Action<float>? UpdateCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AudioParam is null) return;
        value = await AudioParam.GetValueAsync();
    }

    public async Task AudioParamUpdatedAsync()
    {
        if (AudioParam is null) return;
        await AudioParam.SetValueAsync(value);
        UpdateCallback?.Invoke(value);
    }
}
