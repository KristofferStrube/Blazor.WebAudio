@page "/Playground"
@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.WebIDL;
@using KristofferStrube.Blazor.WebAudio.WasmExample.AudioEditor
@using System.IO.Compression
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<PageTitle>WebAudio - Playground</PageTitle>

<div style="display:flex;flex-direction:row;">
    <h2 style="flex-grow: 1">Playground</h2>
    @if (Input is { Length: >= 1 })
    {
        <span>
            <button class="btn btn-primary" @onclick="URLEncode">Encode in URL and paste to clipboard</button>
        </span>
    }
</div>

<textarea @bind="Input" @bind:event="oninput" style="width:100%;height:10vh;" @bind:after=StopAudioEditor />

@if (Code is null)
{
    <div style="height:70vh;">
        <AudioEditor @ref=AudioEditor @bind-Input="Input" />
    </div>
}
else
{
    <div style="height:70vh;display:flex;align-items:center;justify-content:center;">
        <button class="btn btn-lg btn-success" @onclick="() => Code = null">Initialize from URL</button>
    </div>
}

@code {
    AudioEditor AudioEditor = default!;

    [Parameter, SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }

    public string? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Code is not null)
        {
            Input ??= await FromGzipAsync(Code);
        }
        Input ??= "";
    }

    private async Task StopAudioEditor()
    {
        if (AudioEditor is not null)
        {
            await AudioEditor.StopAsync();
        }
    }

    private async Task URLEncode()
    {
        string code = ToGzip(Input!);

        Dictionary<string, object?> queryStrings = new Dictionary<string, object?>()
        {
            { "code", code}
        };

        string url = NavigationManager.GetUriWithQueryParameters(queryStrings);

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
    }

    public async ValueTask DisposeAsync()
    {
        if (AudioEditor is not null)
        {
            await AudioEditor.StopAsync();
        }
    }

    private static string ToGzip(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        using var input = new MemoryStream(bytes);
        using var output = new MemoryStream();
        using var stream = new GZipStream(output, CompressionLevel.SmallestSize);

        input.CopyTo(stream);

        stream.Dispose();

        var result = output.ToArray();
        return Convert.ToBase64String(result);
    }

    private static async Task<string> FromGzipAsync(string value)
    {
        var bytes = Convert.FromBase64String(value);
        await using var input = new MemoryStream(bytes);
        await using var output = new MemoryStream();
        await using var stream = new GZipStream(input, CompressionMode.Decompress);

        await stream.CopyToAsync(output);
        await stream.FlushAsync();

        return System.Text.Encoding.UTF8.GetString(output.ToArray());
    }
}


