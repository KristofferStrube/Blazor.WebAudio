@page "/Drums"
@page "/Instruments"
@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.WebIDL;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<PageTitle>WebAudio - Instruments</PageTitle>
<h2>Instruments</h2>

<p>
    Many intstruments are essentially just a combination of different enharmonic or harmonic modes each with different frequencies, amplitudes, and decay times + some noice.
</p>

<p>
    Below here we have tried to simulate the sound of a <b style="color:orange;">Timpani Drum</b>, a <b style="color:silver;">Bass Drum</b>, and a <b style="color:#77F;">Violin</b>. Try to hitting them!
</p>

<svg width="200" height="200" @onpointerdown=PlayTimps style="user-select:none;touch-action:none;">
    <circle cx="100" cy="100" r="90" fill="orange" stroke="orangered"></circle>
</svg>

<svg width="180" height="180" @onpointerdown=PlayBass style="user-select:none;touch-action:none;">
    <circle cx="90" cy="90" r="80" fill="silver" stroke="grey"></circle>
</svg>
<br />
<br />
@if (melodyStopped)
{
    <svg width="360" height="80" style="user-select:none;touch-action:none;" @onpointerup=EndPointerViolin @onpointermove=MoveViolin>
        <rect x="1" y="1" width="358" height="18" fill=@(primaryFrequency == 659.3f ? "#99F" : "#88F") stroke="#55F" @onpointerdown="e => StartPointerViolin(e, 659.3f)">
        </rect>
        <text x="5" y="16" width="100" height="100" fill="white" style="pointer-events:none;">
            E<sub>5</sub>
        </text>
        <rect x="1" y="21" width="360" height="18" fill=@(primaryFrequency == 440.0f ? "#88F" : "#77F") stroke="#55F" @onpointerdown="e => StartPointerViolin(e, 440.0f)">
        </rect>
        <text x="5" y="36" width="100" height="100" fill="white" style="pointer-events:none;">
            A<sub>4</sub>
        </text>
        <rect x="1" y="41" width="360" height="18" fill=@(primaryFrequency == 293.7f ? "#77F" : "#66F") stroke="#55F" @onpointerdown="e => StartPointerViolin(e, 293.7f)">
        </rect>
        <text x="5" y="56" width="100" height="100" fill="white" style="pointer-events:none;">
            D<sub>4</sub>
        </text>
        <rect x="1" y="61" width="360" height="18" fill=@(primaryFrequency == 196.0f ? "#66F" : "#55F") stroke="#55F" @onpointerdown="e => StartPointerViolin(e, 196.0f)">
        </rect>
        <text x="5" y="76" width="100" height="100" fill="white" style="pointer-events:none;">
            G<sub>3</sub>
        </text>
    </svg>
    <br />
    <br />
    <button class="btn btn-primary" @onclick=PlaySadRomanceFinalFantasyX>Play Sad Romance from Final Fantasy X</button>
}
else
{
    <button class="btn btn-warning" @onclick="() => melodyStopped = true">Stop melody</button>
}

<SpectrogramPlot Analyser=analyser />

@code {
    AudioContext context = default!;
    GainNode mainNode = default!;
    AnalyserNode analyser = default!;

    OscillatorNode? violinOscillator;
    float primaryFrequency;
    GainNode? violinMain;

    bool melodyStopped = true;

    public async Task Initialize()
    {
        if (context is null || mainNode is null || analyser is null)
        {
            context = await AudioContext.CreateAsync(JSRuntime);
            mainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.5f });
            analyser = await context.CreateAnalyserAsync();
            var mixer = await context.GetDestinationAsync();
            await mainNode.ConnectAsync(analyser);
            await analyser.ConnectAsync(mixer);
        }
    }

    static readonly float[] timpsFrequencies = new float[] { 1.00f, 1.50f, 1.98f, 2.44f };
    static readonly float[] timpsAmplitudes = new float[] { 1, 0.8f, 0.6f, 0.2f };
    static readonly float[] timpsDecays = new float[] { 4.5f, 7.5f, 9f, 8.5f };
    public async Task PlayTimps(PointerEventArgs eventArgs)
    {
        await Initialize();

        float distanceFromMid = (float)Math.Sqrt(Math.Pow(eventArgs.OffsetX - 100, 2) + Math.Pow(eventArgs.OffsetY - 100, 2));
        if (distanceFromMid > 90) return;
        float pitch = 100 + distanceFromMid;

        GainNode[]? oscillatorAmplifiers = new GainNode[4];
        for (int i = 0; i < 4; i++)
        {
            var oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Type = OscillatorType.Sine, Frequency = timpsFrequencies[i] * pitch });
            var amplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
            await oscillator.ConnectAsync(amplifier);
            await amplifier.ConnectAsync(mainNode);
            oscillatorAmplifiers[i] = amplifier;
            await oscillator.StartAsync();
        }

        var time = await context.GetCurrentTimeAsync();

        for (int i = 0; i < 4; i++)
        {
            var gain = await oscillatorAmplifiers[i].GetGainAsync();
            await gain.SetValueAsync(await gain.GetValueAsync());
            await gain.LinearRampToValueAtTimeAsync(timpsAmplitudes[i] / timpsAmplitudes.Sum(), time + 0.3);
            await gain.LinearRampToValueAtTimeAsync(0, time + timpsDecays[i] * 0.1);
        }

        var noiseCarrier = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 100 });
        var noiseModulator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 87 });
        var noiseRingModulator = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        var noiseGain = await noiseRingModulator.GetGainAsync();
        var noiseHighPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new() { Type = BiquadFilterType.Highpass, Frequency = 150, Q = 1 });
        var noiseAmplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        await noiseCarrier.ConnectAsync(noiseRingModulator);
        await noiseModulator.ConnectAsync(noiseGain);
        await noiseRingModulator.ConnectAsync(noiseHighPassFilter);
        await noiseHighPassFilter.ConnectAsync(noiseAmplifier);
        await noiseAmplifier.ConnectAsync(mainNode);
        await noiseCarrier.StartAsync();
        await noiseModulator.StartAsync();
        var noiseAmplifierGain = await noiseAmplifier.GetGainAsync();
        await noiseAmplifierGain.LinearRampToValueAtTimeAsync(0.2f, time + 0.3);
        await noiseAmplifierGain.LinearRampToValueAtTimeAsync(0, time + timpsDecays.Max() * 0.1);
    }

    static readonly float[] bassFrequencies = new float[] { 1.00f, 1.86f, 2.72f, 3.64f, 4.50f, 5.46f };
    public async Task PlayBass(PointerEventArgs eventArgs)
    {
        await Initialize();

        float distanceFromMid = (float)Math.Sqrt(Math.Pow(eventArgs.OffsetX - 90, 2) + Math.Pow(eventArgs.OffsetY - 90, 2));
        if (distanceFromMid > 80) return;
        float pitch = 40 + distanceFromMid / 4;

        GainNode[]? oscillatorAmplifiers = new GainNode[6];
        for (int i = 0; i < 6; i++)
        {
            var oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Type = OscillatorType.Sine, Frequency = bassFrequencies[i] * pitch });
            var amplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
            await oscillator.ConnectAsync(amplifier);
            await amplifier.ConnectAsync(mainNode);
            oscillatorAmplifiers[i] = amplifier;
            await oscillator.StartAsync();
        }

        var time = await context.GetCurrentTimeAsync();

        for (int i = 0; i < 6; i++)
        {
            var gain = await oscillatorAmplifiers[i].GetGainAsync();
            await gain.SetValueAsync(await gain.GetValueAsync());
            await gain.LinearRampToValueAtTimeAsync(1 / (float)6, time + 0.2);
            await gain.LinearRampToValueAtTimeAsync(0, time + 0.3);
        }

        var midFrequencyModulator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 87 });
        var midFrequencyModulatorAmplifier = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 375 });
        var midFrequencyCarrier = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Frequency = 625 });
        var midFrequencyBandPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new() { Type = BiquadFilterType.Bandpass, Frequency = 625, Q = 2 });
        var midFrequencyGain = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });
        await midFrequencyModulator.ConnectAsync(midFrequencyModulatorAmplifier);
        var carrierFrequency = await midFrequencyCarrier.GetFrequencyAsync();
        await midFrequencyModulatorAmplifier.ConnectAsync(carrierFrequency);
        await midFrequencyCarrier.ConnectAsync(midFrequencyBandPassFilter);
        await midFrequencyBandPassFilter.ConnectAsync(midFrequencyGain);
        await midFrequencyGain.ConnectAsync(mainNode);
        await midFrequencyModulator.StartAsync();
        await midFrequencyCarrier.StartAsync();
        var midGain = await midFrequencyGain.GetGainAsync();
        await midGain.LinearRampToValueAtTimeAsync(0.05f, time + 0.2);
        await midGain.LinearRampToValueAtTimeAsync(0, time + 0.3);
    }

    private SemaphoreSlim violinSemaphore = new SemaphoreSlim(1, 1);

    public async Task StartPointerViolin(PointerEventArgs eventArgs, float primaryFrequency)
    {
        await Initialize();

        if (!await violinSemaphore.WaitAsync(50)) return;

        if (violinMain is not null)
        {
            await violinMain.DisconnectAsync();
        }

        this.primaryFrequency = primaryFrequency;
        double position = eventArgs.OffsetX;
        float frequency = (float)(primaryFrequency + position / 4 - 45);

        await StartViolin(frequency);

        violinSemaphore.Release();
    }

    public async Task StartViolin(float frequency)
    {
        violinOscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new()
            {
                Type = OscillatorType.Sawtooth,
                Frequency = frequency
            });
        await using var lowPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Lowpass,
                Frequency = 6000
            });
        await using var highPassFilter = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Highpass,
                Frequency = 200
            });

        await using var band300 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 300,
                Q = 3.5f // This is equivalent to the resonance which makes this narrower than the default.
            });
        await using var band300Amp = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.4f });

        await using var band700 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 700,
                Q = 3.5f // This is equivalent to the resonance which makes this narrower than the default.
            });
        await using var band700Amp = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.6f });

        await using var brand3000 = await BiquadFilterNode.CreateAsync(JSRuntime, context, new()
            {
                Type = BiquadFilterType.Bandpass,
                Frequency = 3000,
                Q = 2f // This is equivalent to the resonance which makes this a bit narrower than the default.
            });
        await using var band3000Amp = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 5f });

        violinMain = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });

        await violinOscillator.ConnectAsync(lowPassFilter);
        await lowPassFilter.ConnectAsync(highPassFilter);

        await highPassFilter.ConnectAsync(band300);
        await band300.ConnectAsync(band300Amp);
        await band300Amp.ConnectAsync(violinMain);

        await highPassFilter.ConnectAsync(band700);
        await band700.ConnectAsync(band700Amp);
        await band700Amp.ConnectAsync(violinMain);

        await highPassFilter.ConnectAsync(brand3000);
        await brand3000.ConnectAsync(band3000Amp);
        await band3000Amp.ConnectAsync(violinMain);

        await violinMain.ConnectAsync(mainNode);
        await violinOscillator.StartAsync();

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await violinMain.GetGainAsync();
        await amplifierGain.LinearRampToValueAtTimeAsync(0.1f, time + 0.2);
    }

    public async Task MoveViolin(PointerEventArgs eventArgs)
    {
        if (violinMain is null || violinOscillator is null) return;
        if (!await violinSemaphore.WaitAsync(50)) return;
        if (violinMain is null || violinOscillator is null)
        {
            violinSemaphore.Release();
            return;
        }

        double position = eventArgs.OffsetX;
        float frequency = (float)(primaryFrequency + position / 4 - 45);

        await using var frequencyParameter = await violinOscillator.GetFrequencyAsync();
        await frequencyParameter.SetValueAsync(frequency);

        violinSemaphore.Release();
    }

    public async Task EndPointerViolin(PointerEventArgs eventArgs)
    {
        if (!await violinSemaphore.WaitAsync(200)) return;

        if (violinMain is null || violinOscillator is null)
        {
            violinSemaphore.Release();
            return;
        }

        await EndViolin();

        var localViolinMain = violinMain;
        violinMain = null;

        var localViolinOscillator = violinOscillator;
        violinOscillator = null;

        violinSemaphore.Release();

        await Task.Delay(700);
        await localViolinMain.DisconnectAsync();
        await localViolinMain.DisposeAsync();
        await localViolinOscillator.DisconnectAsync();
        await localViolinOscillator.DisposeAsync();
    }

    public async Task EndViolin()
    {
        if (violinMain is null || violinOscillator is null) return;

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await violinMain.GetGainAsync();
        await amplifierGain.LinearRampToValueAtTimeAsync(0, time + 0.7);
    }

    private int octave = 5;

    private float CFrequency => (float)Keyboard.Frequency(octave, 1);
    private float DFrequency => (float)Keyboard.Frequency(octave, 3);
    private float EFrequency => (float)Keyboard.Frequency(octave, 5);
    private float FFrequency => (float)Keyboard.Frequency(octave, 6);
    private float GFrequency => (float)Keyboard.Frequency(octave, 8);
    private float AFrequency => (float)Keyboard.Frequency(octave, 10);
    private float BFrequency => (float)Keyboard.Frequency(octave, 12);

    private async Task PlayViolinFrequency(float frequency, int duration, int delayAfter)
    {
        await StartViolin(frequency);
        await Task.Delay(duration);
        await EndViolin();

        var localViolinMain = violinMain;
        violinMain = null;
        var localViolinOscillator = violinOscillator;
        violinOscillator = null;

        await Task.Delay(delayAfter);
#pragma warning disable CS4014
        Task.Run(async () =>
        {
            await Task.Delay(Math.Max(800 - delayAfter, 0));

            await localViolinMain!.DisconnectAsync();
            await localViolinMain!.DisposeAsync();

            await localViolinOscillator!.DisconnectAsync();
            await localViolinOscillator!.DisposeAsync();
        });
#pragma warning restore CS4014
    }

    private (float frequency, int duration, int delayAfter)[] SadRomanceMelody =>
    [
    (EFrequency, 500, 300),
    (EFrequency, 500, 300),
    (EFrequency, 500, 500),
    (EFrequency, 500, 300),
    (GFrequency, 500, 800),

    (EFrequency, 500, 300),
    (EFrequency, 500, 300),
    (EFrequency, 500, 500),
    (EFrequency, 500, 300),
    (GFrequency, 500, 800),

    (EFrequency, 500, 400),
    (DFrequency, 500, 400),
    (CFrequency, 500, 400),
    (BFrequency, 500, 400),
    (GFrequency, 500, 400),

    (AFrequency, 400, 300),
    (BFrequency, 400, 300),
    (CFrequency, 400, 400),

    (BFrequency, 400, 300),
    (CFrequency, 400, 300),
    (DFrequency, 400, 400),

    (BFrequency, 500, 400),
    (GFrequency, 500, 400),
    (EFrequency, 400, 300),
    (GFrequency, 500, 400),
    (AFrequency, 500, 400),

    (GFrequency, 400, 300),
    (FFrequency, 400, 400),

    (EFrequency, 400, 400),

    (AFrequency, 400, 300),
    (BFrequency, 400, 300),
    (CFrequency, 400, 400),

    (BFrequency, 400, 300),
    (CFrequency, 400, 300),
    (DFrequency, 400, 400),

    (BFrequency, 500, 400),
    (GFrequency, 500, 400),
    (EFrequency, 400, 300),
    (GFrequency, 500, 400),
    (AFrequency, 800, 600),

    (AFrequency, 400, 300),
    (BFrequency, 400, 300),
    (CFrequency, 400, 400),

    (BFrequency, 400, 300),
    (CFrequency, 400, 300),
    (DFrequency, 400, 400),

    (BFrequency, 500, 400),
    (GFrequency, 500, 400),
    (EFrequency, 400, 300),
    (GFrequency, 500, 400),
    (AFrequency, 500, 400),

    (GFrequency, 400, 300),
    (FFrequency, 400, 400),

    (GFrequency, 400, 500),

    (AFrequency, 400, 300),
    (BFrequency, 400, 300),
    (CFrequency, 400, 400),

    (BFrequency, 400, 300),
    (CFrequency, 400, 300),
    (DFrequency, 400, 400),

    (EFrequency, 500, 400),
    (BFrequency, 500, 400),
    (GFrequency, 500, 400),
    (AFrequency, 800, 600),

    (CFrequency, 400, 300),
    (BFrequency, 400, 300),
    (AFrequency, 800, 600),

    (EFrequency, 400, 300),
    (GFrequency, 400, 300),
    (GFrequency, 400, 400),

    (CFrequency, 400, 300),
    (BFrequency, 400, 300),
    (AFrequency, 400, 400),

    (GFrequency, 400, 300),
    (EFrequency, 400, 300),
    (FFrequency, 400, 400),
    (GFrequency, 400, 400),
    ];

    public async Task PlaySadRomanceFinalFantasyX()
    {
        await Initialize();

        melodyStopped = false;

        foreach (var node in SadRomanceMelody)
        {
            if (melodyStopped) return;

            await PlayViolinFrequency(node.frequency, node.duration, node.delayAfter);
        }

        melodyStopped = true;
    }

    public async Task StopSound()
    {
        if (mainNode is null || analyser is null) return;

        await mainNode.DisconnectAsync(analyser);
        melodyStopped = true;
    }

    public async ValueTask DisposeAsync()
    {
        await StopSound();
    }
}


