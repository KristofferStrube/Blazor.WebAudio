@page "/Keyboard"
@inject IJSRuntime JSRuntime
@using KristofferStrube.Blazor.WebAudio.WasmExample.ADSREditor
@implements IAsyncDisposable

<PageTitle>WebAudio - Keyboard</PageTitle>
<h2>Keyboard</h2>

<svg width="100%"
     height="40vh"
     viewBox="0 0 @(keys.Count(k => k.Color == "white")*100) 600"
     style="user-select:none;touch-action:none;">
    @foreach (var i in whiteKeyIndices)
    {
        var k = i;
        <rect @onmousedown="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @onmouseenter="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @onmouseup="End"
              @onmouseout="End"
              @ontouchstart="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @ontouchend="End"
              x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100)"
              y="0"
              width="100"
              height="600"
              fill="white"
              stroke="black"
              stroke-width="1"></rect>
        <text>
            <text x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100+20)"
                  y="580"
                  width="100"
                  height="600"
                  fill="white"
                  stroke="black"
                  stroke-width="4"
                  style="font-size:80px;pointer-events:none;">
                @keys[i].Name
            </text>
        </text>
    }
    @foreach (var i in blackKeyIndices)
    {
        var k = i;
        <rect @onmousedown="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @onmouseenter="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @onmouseup="End"
              @onmouseout="End"
              @ontouchstart="e => Start(keys[k].Octave, keys[k].Pitch, e)"
              @ontouchend="End"
              x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100-35)"
              y="0"
              width="70"
              height="400"
              fill="black"
              stroke="black"
              stroke-width="1"></rect>
    }
</svg>
<GainSlider GainNode="mainNode" />

<div style="height:30vh;width:100%;">
    <ADSREditor @ref=ADSREditor />
</div>

<select @onchange="ChangePreset">
    <option value=-1>Select Preset</option>
    @for (int i = 0; i < adsrPresets.Length; i++)
    {
        <option value=@i>@adsrPresets[i].name</option>
    }
</select>

@code {
    ADSREditor ADSREditor = default!;

    AudioContext context = default!;
    GainNode? mainNode;
    DynamicsCompressorNode? compressor;
    GainNode? keyboardMain;
    OscillatorNode? oscillator;

    double decayEndTime;

    List<(string Name, int Octave, int Pitch, string Color)> keys = new();
    int[] whiteKeyIndices = Array.Empty<int>();
    int[] blackKeyIndices = Array.Empty<int>();

    (string name, int attack, int decay, int sustain, int release)[] adsrPresets =
    [("Glockenspiel", 2, 2, 50, 100),
    ("Piano", 2, 40, 0, 0),
    ("Organ", 2, 2, 100, 2),
    ("Flute", 40, 2, 70, 20)];

    protected override async Task OnInitializedAsync()
    {
        await InitializeContext();

        var letters = new List<string>() { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" };
        keys = Enumerable
            .Range(3, 3)
            .SelectMany(octave =>
                Enumerable
                .Range(1, 12)
                .Select(pitch => (letters[pitch - 1], octave, pitch, letters[pitch - 1].Contains('#') ? "black" : "white"))
            )
            .ToList();
        whiteKeyIndices = keys.Where(key => key.Color == "white").Select(key => keys.IndexOf(key)).ToArray();
        blackKeyIndices = keys.Where(key => key.Color == "black").Select(key => keys.IndexOf(key)).ToArray();
    }

    private void ChangePreset(ChangeEventArgs eventArgs)
    {
        if (!int.TryParse((string)eventArgs.Value!, out int index))
            return;

        if (index is -1)
            return;

        (string _, int attack, int decay, int sustain, int release) = adsrPresets[index];

        ADSREditor.SetPreset(attack, decay, sustain, release);
    }

    public async Task InitializeContext()
    {
        if (context is null || mainNode is null || compressor is null)
        {
            context = await AudioContext.CreateAsync(JSRuntime);
            mainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.1f });
            compressor = await DynamicsCompressorNode.CreateAsync(JSRuntime, context);
            await using AudioDestinationNode destination = await context.GetDestinationAsync();
            await compressor.ConnectAsync(mainNode);
            await mainNode.ConnectAsync(destination);
        }
    }

    private SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1, 1);

    public async Task Start(int octave, int pitch, EventArgs eventArgs)
    {
        if (eventArgs is MouseEventArgs { } mouse && (mouse.Buttons & 1) != 1) return;

        float frequency = Frequency(octave, pitch);

        await InitializeContext();

        if (!await semaphoreSlim.WaitAsync(50)) return;

        if (keyboardMain is not null)
        {
            await keyboardMain.DisconnectAsync();
        }

        oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new()
            {
                Type = OscillatorType.Sine,
                Frequency = frequency
            });

        keyboardMain = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0 });

        await oscillator.ConnectAsync(keyboardMain);
        await keyboardMain.ConnectAsync(compressor!);
        await oscillator.StartAsync();

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await keyboardMain.GetGainAsync();
        var attackEndTime = time + ADSREditor.Attack;
        await amplifierGain.LinearRampToValueAtTimeAsync(1f, attackEndTime);
        decayEndTime = attackEndTime + ADSREditor.Decay;
        await amplifierGain.LinearRampToValueAtTimeAsync(ADSREditor.Sustain, decayEndTime);

        semaphoreSlim.Release();
    }

    public async Task End()
    {
        if (!await semaphoreSlim.WaitAsync(200)) return;

        if (keyboardMain is null || oscillator is null)
        {
            semaphoreSlim.Release();
            return;
        }

        var time = await context.GetCurrentTimeAsync();
        await using var amplifierGain = await keyboardMain.GetGainAsync();
        await amplifierGain.CancelScheduledValuesAsync(0);
        await amplifierGain.LinearRampToValueAtTimeAsync(0, Math.Max(time, decayEndTime) + ADSREditor.Release);

        var localKeyboardMain = keyboardMain;
        keyboardMain = null;

        var localOscillator = oscillator;
        oscillator = null;

        semaphoreSlim.Release();

        await Task.Delay((int)((Math.Max(0, decayEndTime - time) + ADSREditor.Release) * 1000) + 100);
        await localKeyboardMain.DisconnectAsync();
        await localKeyboardMain.DisposeAsync();
        await localOscillator.DisconnectAsync();
        await localOscillator.DisposeAsync();
    }

    public static float Frequency(int octave, int pitch)
    {
        var noteIndex = octave * 12 + pitch;
        var a = Math.Pow(2, 1.0 / 12);
        var A4 = 440;
        var A4Index = 4 * 12 + 10;
        var halfStepDifference = noteIndex - A4Index;
        return (float)(A4 * Math.Pow(a, halfStepDifference));
    }

    public async ValueTask DisposeAsync()
    {
        if (context is not null)
        {
            await context.DisposeAsync();
        }
        if (mainNode is not null)
        {
            await mainNode.DisconnectAsync();
            await mainNode.DisposeAsync();
        }
        if (compressor is not null)
        {
            await compressor.DisconnectAsync();
            await compressor.DisposeAsync();
        }
    }
}


