@page "/Spectrogram"
<!--Previous spelling error-->
@page "/Spectogram"
@using KristofferStrube.Blazor.WebIDL
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
<PageTitle>WebAudio - Spectrogram</PageTitle>
<h2>Spectrogram</h2>

<p>
    On this page we create a Spectrogram by passing the sound of a random <code>OscillatorNode</code> through an <code>AnalyserNode</code>.
</p>

@if (oscillator is null)
{
    <button class="btn btn-success" @onclick=PlaySound>Play Sound 🔊</button>
}
else
{
    <button class="btn btn-warning" @onclick=StopSound>Stop Sound 🔊</button>
}
<br />
<GainSlider GainNode="gainNode" />
<br />
@if (frequency is not 0)
{
    <div>
        frequency: @frequency Hz
        <br />
        type: @type
    </div>
}
<SpectrogramPlot Analyser="analyser" UpperFrequency="400" />

@code {
    AudioContext context = default!;
    GainNode gainNode = default!;
    OscillatorNode? oscillator;
    AnalyserNode? analyser;
    byte[] timeDomainMeasurements = Array.Empty<byte>();
    byte[] frequencyMeasurements = Array.Empty<byte>();
    float frequency;
    OscillatorType type;

    protected override async Task OnInitializedAsync()
    {
        context = await AudioContext.CreateAsync(JSRuntime);
        gainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = 0.1f });

        AudioDestinationNode destination = await context.GetDestinationAsync();
        await gainNode.ConnectAsync(destination);
    }

    public async Task PlaySound()
    {
        await StopSound();
        type = (OscillatorType)Random.Shared.Next(0, 4);
        frequency = Random.Shared.Next(100, 500);

        analyser = await context.CreateAnalyserAsync();
        await analyser.ConnectAsync(gainNode);

        oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, new() { Type = type, Frequency = frequency });
        await oscillator.ConnectAsync(analyser);
        await oscillator.StartAsync();
    }

    public async Task StopSound()
    {
        if (oscillator is null) return;
        await oscillator.StopAsync();
        oscillator = null;
    }

    public async ValueTask DisposeAsync()
    {
        await StopSound();
    }
}


