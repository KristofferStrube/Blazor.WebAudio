@page "/AudioPlayer"
@using System.Globalization;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
<PageTitle>WebAudio - Audio Player</PageTitle>
<h2>Audio Player</h2>

<div style="user-select: none;display:flex;flex-direction:row;" aria-label="Player controls">
    <button class="media-control" aria-label="Randomize tracks" @onclick=RandomizeTracks>🔀</button>
    <button class="media-control" aria-label="Previous track" @onclick=PreivousTrack>⏮</button>
    @if (playing)
    {
        <button class="media-control" aria-label="Pause" @onclick=Pause>⏸</button>
    }
    else
    {
        <button class="media-control" aria-label="Play" @onclick=Play>⏯</button>
    }
    <button class="media-control" aria-label="Next track" @onclick=NextTrack>⏭</button>
</div>
<span style="width:5%;display:inline-block;text-align:right;">
    @Math.Round(playTime, 0)
</span>
<svg width="60%" viewBox="0 0 1 0.02" style="margin-left:5px; margin-right:5px;">
    <rect fill="#bbb" x="0" y="0" width="1" height="0.02"></rect>
    @if (trackDuration is not 0)
    {
        <rect fill="#555" x="0" y="0" width="@((playTime/trackDuration).ToString(CultureInfo.InvariantCulture))" height="0.02"></rect>
    }
</svg>
<span style="width:5%;display:inline-block;">
    @(trackDuration > 0 ? Math.Round(trackDuration, 0) : "")
</span>
<ol>
    @for (int i = 0; i < tracks.Count; i++)
    {
        @if (i == currentTrack)
        {
            <li><u>@tracks[i][5..]</u></li>
        }
        else
        {
            <li>@tracks[i][5..]</li>
        }
    }
</ol>


@code {
    private bool playing;
    private bool currentTrackLoaded = false;
    private int currentTrack = 0;
    private double playTime;
    private double startTime;
    private double? pauseTime;
    private double offset;
    private double trackDuration;
    private int interactions;
    private List<string> tracks = new() {
        "Data/file_example_MP3_700KB.mp3",
        "Data/yamaha-psr-16-demo-music-25226.mp3",
        "Data/dream-sound-effect-downscale-7134.mp3",
        "Data/drama-cue-synth-and-cello-114417.mp3",
    };

    private byte[]?[] loadedTracks = new byte[]?[4];

    private AudioContext context = default!;
    private AudioDestinationNode destination = default!;
    private AudioBufferSourceNode currentAudioBufferNode = default!;
    private AudioBuffer currentAudioBuffer = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await EnsureInitialized();
            await EnsureCurrentTrackLoaded();
        }
        catch
        {
            Console.WriteLine("Couldn't initialize yet.");
        }
    }

    public async Task EnsureInitialized()
    {
        if (context is { }) return;

        context = await AudioContext.CreateAsync(JSRuntime);
        destination = await context.GetDestinationAsync();
    }

    public async Task EnsureCurrentTrackLoaded()
    {
        if (currentTrackLoaded) return;

        // Dispose old audio buffer
        if (currentAudioBuffer is not null)
        {
            await currentAudioBuffer.DisposeAsync();
        }

        if (loadedTracks[currentTrack] is null)
        {
            loadedTracks[currentTrack] = await HttpClient.GetByteArrayAsync(tracks[currentTrack]);
        }
        AudioBuffer nextAudioBuffer = await context.DecodeAudioDataAsync(loadedTracks[currentTrack]);

        currentAudioBuffer = nextAudioBuffer;
        trackDuration = await currentAudioBuffer.GetDurationAsync();

        currentTrackLoaded = true;
    }

    public async Task Play()
    {
        await EnsureInitialized();
        if (playing) return;
        interactions++;
        await EnsureCurrentTrackLoaded();

        currentAudioBufferNode = await context.CreateBufferSourceAsync();
        await currentAudioBufferNode.SetBufferAsync(currentAudioBuffer);
        await currentAudioBufferNode.ConnectAsync(destination);
        if (pauseTime is null)
        {
            await currentAudioBufferNode.StartAsync();
        }
        else
        {
            await currentAudioBufferNode.StartAsync(when: 0, offset: offset);
        }
        startTime = await context.GetCurrentTimeAsync();

        playing = true;
        var currentInteractions = interactions;
        while (currentInteractions == interactions)
        {
            playTime = await context.GetCurrentTimeAsync() - startTime + offset;
            StateHasChanged();
            if (playTime >= trackDuration)
            {
                await NextTrack();
            }
            await Task.Delay(100);
        }
    }

    public async Task Pause()
    {
        if (!playing) return;
        interactions++;

        await currentAudioBufferNode.DisconnectAsync();
        await currentAudioBufferNode.StopAsync();
        await currentAudioBufferNode.DisposeAsync();

        var currentTime = await context.GetCurrentTimeAsync();
        pauseTime = await context.GetCurrentTimeAsync();
        if (offset + currentTime - startTime > trackDuration)
        {
            offset = 0;
        }
        else
        {
            offset += currentTime - startTime;
        }

        playing = false;
    }

    public Task PreivousTrack() => SwitchTrack(() => currentTrack = (currentTrack - 1 + tracks.Count) % tracks.Count);
    public Task NextTrack() => SwitchTrack(() => currentTrack = (currentTrack + 1) % tracks.Count);

    private async Task SwitchTrack(Action changeTrack)
    {
        await EnsureInitialized();

        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }
        changeTrack();
        currentTrackLoaded = false;
        await EnsureCurrentTrackLoaded();
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    public async Task RandomizeTracks()
    {
        var wasPlaying = playing;
        if (wasPlaying)
        {
            await Pause();
        }
        tracks = tracks.OrderBy(x => Random.Shared.Next()).ToList();
        loadedTracks = new byte[]?[4];
        currentTrackLoaded = false;
        currentTrack = 0;
        offset = 0;
        playTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Pause();
    }
}